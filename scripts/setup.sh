#!/bin/bash

# Ovƒõ≈ôen√≠, ≈æe skript byl spu≈°tƒõn pomoc√≠ `source`, ne samostatnƒõ
(return 0 2>/dev/null) || {
  echo "‚ùå Tento skript mus√≠≈° spustit pomoc√≠:"
  echo ""
  echo "   source $0"
  echo ""
  echo "üíõ Jinak se virtu√°ln√≠ prost≈ôed√≠ a promƒõnn√© neaktivuj√≠ spr√°vnƒõ!"
  exit 1
}

# Exit on error
set -e

echo "üì¶ Vytv√°≈ô√≠m virtu√°ln√≠ prost≈ôed√≠..."

if [ ! -d ".venv" ]; then
  python3 -m venv .venv
fi

source .venv/bin/activate
echo "‚úÖ Aktivov√°no: $(which python3)"

# P≈ôid√°n√≠ Homebrew do PATH, pokud chyb√≠
if [[ ":$PATH:" != *":/opt/homebrew/bin:"* ]]; then
  export PATH="/opt/homebrew/bin:$PATH"
fi

# Install brew (pokud nen√≠ nainstalov√°n)
if ! command -v brew &> /dev/null; then
  echo "üëÉ Instaluji Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  export PATH="/opt/homebrew/bin:$PATH"
fi

# Install unixODBC driver
echo "üîß Instaluji unixODBC..."
brew install unixodbc

# Install pipx
if ! command -v pipx &> /dev/null; then
  echo "üëÉ Instaluji pipx..."
  brew install pipx
fi

export PATH="$HOME/.local/bin:$PATH"

# Install poetry
if ! command -v poetry &> /dev/null; then
  echo "üëÉ Instaluji Poetry p≈ôes pipx..."
  pipx install poetry
fi

# Install ODBC driver
echo "üì• Instaluji ODBC pro SQL Server..."
brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release
brew update
brew upgrade
HOMEBREW_ACCEPT_EULA=Y brew install msodbcsql18 mssql-tools18

# Pou≈æij pip z virtu√°ln√≠ho prost≈ôed√≠
python -m pip install --pre --no-binary :all: pyodbc

# Nastaven√≠ ODBCINI a ODBCSYSINI podle OS
if [[ "$(uname)" == "Darwin" ]]; then
  echo "üçè Detekov√°n macOS ‚Äì pou≈æ√≠v√°m odbc_mac.ini"
  export ODBCINI="$(pwd)/backend/connectors/odbc_mac.ini"
else
  echo "üêß Detekov√°n Linux ‚Äì pou≈æ√≠v√°m odbc.ini"
  export ODBCINI="$(pwd)/backend/connectors/odbc.ini"
fi

export ODBCSYSINI="$(pwd)/backend/connectors"

# Load environment promƒõnn√©
if [ -f ".env" ]; then
  echo "üìÑ Naƒç√≠t√°m .env soubor..."
  export $(grep -v '^#' .env | xargs)
fi

# Poetry install
echo "üì¶ Instalace z√°vislost√≠ p≈ôes Poetry..."
poetry install --no-root

# Workaround pro knihovny
export KMP_DUPLICATE_LIB_OK=TRUE

# üîß Vytvo≈ôen√≠ postactivate skriptu pro automatick√© exporty
POSTACTIVATE_PATH=".venv/bin/postactivate"
if [ ! -f "$POSTACTIVATE_PATH" ]; then
  echo "üîß Vytv√°≈ô√≠m postactivate skript..."
  cat <<EOF > "$POSTACTIVATE_PATH"
# >>> Custom environment variables >>>
export ODBCINI="\$(pwd)/backend/connectors/odbc_mac.ini"
export ODBCSYSINI="\$(pwd)/backend/connectors"
export KMP_DUPLICATE_LIB_OK=TRUE

if [ -f "\$(pwd)/.env" ]; then
  export \$(grep -v '^#' "\$(pwd)/.env" | xargs)
fi
# <<< Custom environment variables <<<
EOF
  chmod +x "$POSTACTIVATE_PATH"
fi

# Patch .venv/bin/activate tak, aby v≈ædy volal postactivate
ACTIVATE_PATH=".venv/bin/activate"
POSTACTIVATE_PATH=".venv/bin/postactivate"

# Vytvo≈ô postactivate, pokud neexistuje
if [ ! -f "$POSTACTIVATE_PATH" ]; then
  echo "üîß Vytv√°≈ô√≠m postactivate skript..."
  cat <<EOF > "$POSTACTIVATE_PATH"
# >>> Custom environment variables >>>
export ODBCINI="\$(pwd)/backend/connectors/odbc_mac.ini"
export ODBCSYSINI="\$(pwd)/backend/connectors"
export KMP_DUPLICATE_LIB_OK=TRUE

if [ -f "\$(pwd)/.env" ]; then
  export \$(grep -v '^#' "\$(pwd)/.env" | xargs)
fi
# <<< Custom environment variables <<<
EOF
  chmod +x "$POSTACTIVATE_PATH"
fi

# P≈ôidej vol√°n√≠ postactivate do activate skriptu (bez duplikace)
if ! grep -q "postactivate" "$ACTIVATE_PATH"; then
  echo "üîß P≈ôid√°v√°m vol√°n√≠ postactivate do activate skriptu..."
  echo -e '\n# Run custom postactivate if present\nif [ -f "$VIRTUAL_ENV/bin/postactivate" ]; then\n  source "$VIRTUAL_ENV/bin/postactivate"\nfi' >> "$ACTIVATE_PATH"
fi


# Fin√°ln√≠ echo
echo "üêç Aktivn√≠ Python: $(which python3)"
echo "‚úÖ Hotovo! Virtu√°ln√≠ prost≈ôed√≠ je aktivn√≠. Pokraƒçuj v tomto termin√°lu."